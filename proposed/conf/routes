# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Pages
GET        /authenticate                         controllers.Login.authenticate(openid_identifier: String)
GET        /openIDCallback                       controllers.Login.openIDCallback()
GET        /logout                               controllers.Login.logout()
GET        /                                     controllers.Application.home()
GET        /search                               controllers.Application.search()
GET        /streams                              controllers.Application.streams()
GET        /manage                               controllers.CtrlSource.manage()
GET        /attachFunction											 controllers.Application.attachFunction()
GET        /API                                  controllers.Public.about()

# Accounts
GET        /account                              controllers.CtrlUser.get()
GET        /account/edit                         controllers.CtrlUser.edit()
GET        /account/submit                       controllers.CtrlUser.submit()

# Dummy thing
GET         /dummy/:id/discover                  controllers.DummyThing.discover(id: Long)
GET         /dummy/:id/sensors                   controllers.DummyThing.sensors(id: Long)
GET         /dummy/:id/sensors/temperature       controllers.DummyThing.temperature(id: Long)
GET         /dummy/:id/sensors/energy            controllers.DummyThing.energy(id: Long)
POST        /dummy/:id/actuators/print           controllers.DummyThing.print(id: Long)

# Streams
## TODO move all functions that read streams to CtrlStream

GET        /user/followStream/:id/:follow				controllers.CtrlUser.followStream(id: Long, follow: Boolean)
GET        /user/isFollowingStream/:id					controllers.CtrlUser.isFollowingStream(id: Long)
GET        /user/:ownerName/$path<.*>						controllers.CtrlStream.getData(ownerName: String, path: String, tail: Long ?= -1, last: Long ?=-1, since: Long ?= -1)
GET        /streams/delete/:id   								controllers.CtrlStream.delete(id: Long)
GET        /streams/clearData/:id 							controllers.CtrlStream.clear(id: Long)
GET        /streams/publicAccess/:id/:pub 			controllers.CtrlStream.setPublicAccess(id: Long, pub: Boolean)
GET        /streams/publicSearch/:id/:pub 			controllers.CtrlStream.setPublicSearch(id: Long, pub: Boolean)
GET        /streams/publicAccess/:id						controllers.CtrlStream.isPublicAccess(id: Long)
GET        /streams/publicSearch/:id						controllers.CtrlStream.isPublicSearch(id: Long)
GET        /streams/:id								    			controllers.CtrlStream.getDataById(id: Long, tail: Long ?= -1, last: Long ?=-1, since: Long ?= -1)
DELETE     /streams/:id			    								controllers.CtrlStream.clear(id: Long)
POST    	 /streams/:id			    								controllers.CtrlStream.post(id: Long)

# Sources
GET			/sources/add												controllers.CtrlSource.add()
GET			/sources/initialise									controllers.CtrlSource.initialise()
POST		/sources/modify/:id									controllers.CtrlSource.modify(id: Long)
GET			/sources/delete/:id									controllers.CtrlSource.delete(id: Long)
POST		/sources/delete/:id									controllers.CtrlSource.delete(id: Long)
GET			/sources/deleteParser/:id						controllers.CtrlSource.deleteParser(id: Long)
POST		/sources/deleteParser/:id						controllers.CtrlSource.deleteParser(id: Long)
POST		/sources/addParser									controllers.CtrlSource.addParser(sourceId: Long, inputParser: String, inputType: String, streamPath: String, timeformat: String)
GET			/sources/:id												controllers.CtrlSource.getById(id: Long)
POST    /sources/:id			    							controllers.CtrlSource.post(id: Long)

# Sources API
POST    /api/sources/:key										controllers.CtrlSource.postByKey(key: String)
#GET		/api/sources/:key										controllers.CtrlSource.getByKey(key: String)
#GET    /api/sources/:key										controllers.CtrlSource.postByKey(key: String)

## This was providing a way to post without the key !! (bug)
#POST    	/api/label/:user/:label							controllers.CtrlSource.postByLabel(user: String, label: String)
#GET			/api/label/:user/:label							controllers.CtrlSource.getByLabel( user: String, label: String)

# Streams, API
GET     /api/streams/delete/:key   					controllers.CtrlStream.deleteByKey(key: String)
GET     /api/streams/clearData/:key					controllers.CtrlStream.clearByKey(key: String)
POST		/api/streams/:key							    	controllers.CtrlStream.postByKey(key: String)
GET			/api/streams/:key							    	controllers.CtrlStream.getByKey(key: String, tail: Long ?= -1, last: Long ?=-1, since: Long ?= -1)

#Function 
POST		/attachFunction/attach							controllers.CtrlFunction.attach()

# Javascript Routes
GET    /assets/javascripts/routes      			controllers.Application.javascriptRoutes()

# Map static resources from the /public folder to the /assets URL path
GET        /assets/*file                		controllers.Assets.at(path="/public", file)

